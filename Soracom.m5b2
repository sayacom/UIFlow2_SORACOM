{"category":"Soracom","color":"#34cdd7","uiflow2":{"jscode":"const CUSTOM_SORACOM_LANGUAGES = {\n  \"CUSTOM_SORACOM_INIT\": {\n    \"en\": \"Initialize %1 AuthType %2 Username %3 Password %4\"\n  },\n  \"CUSTOM_SORACOM_SET_INTERFACE\": {\n    \"en\": \"%1 Set UART/Modem Interface from %2 name %3\"\n  },\n  \"CUSTOM_SORACOM_SET_DEBUG_MODE\": {\n    \"en\": \"%1 Set debug mode %2\"\n  },\n  \"CUSTOM_SORACOM_EXECUTE_AT_COMMAND\": {\n    \"en\": \"%1 Execute AT Command %2 Expect response %3 Timeout %4\"\n  },\n  \"CUSTOM_SORACOM_DIALUP\": {\n    \"en\": \"%1 Dialup to %2 Timeout %3\"\n  },\n  \"CUSTOM_SORACOM_CONNECT_PPP\": {\n    \"en\": \"%1 Connect PPP\"\n  },\n  \"CUSTOM_SORACOM_PPP_ISCONNECTED\": {\n    \"en\": \"%1 PPP isConnected\"\n  },\n  \"CUSTOM_SORACOM_PPP_IFCONFIG\": {\n    \"en\": \"%1 PPP ifconfig\"\n  },\n  \"CUSTOM_SORACOM_DISCONNECT_PPP\": {\n    \"en\": \"%1 Disconnect PPP\"\n  },\n  \"CUSTOM_SORACOM_SEND_DATA_BY_HTTP\": {\n    \"en\": \"%1 Send data as JSON by HTTP %2 Header %3 Body %4\"\n  },\n  \"CUSTOM_SORACOM_SEND_DATA_TO_BEAM\": {\n    \"en\": \"%1 Send data as JSON by HTTP to SORACOM Beam, Endpoint %2 Method %3 Path %4 Headers %5 Body %6\"\n  },\n  \"CUSTOM_SORACOM_GET_SIM_TAG\": {\n    \"en\": \"%1 Get SIM Tag Name %2\"\n  },\n  \"CUSTOM_SORACOM_SET_SIM_TAG\": {\n    \"en\": \"%1 Set SIM Tag Name %2 Value %3\"\n  },\n  \"CUSTOM_SORACOM_DELETE_SIM_TAG\": {\n    \"en\": \"%1 Delete SIM Tag Name %2\"\n  },\n  \"CUSTOM_SORACOM_GET_USERDATA\": {\n    \"en\": \"%1 Get Userdata\"\n  },\n  \"CUSTOM_SORACOM_GET_LATEST_HTTP_RESPONSE_HEADERS\": {\n    \"en\": \" %1 Get latest HTTP response headers\"\n  },\n  \"CUSTOM_SORACOM_GET_LATEST_HTTP_RESPONSE_STATUS_CODE\": {\n    \"en\": \"%1 Get latest HTTP response status code\"\n  },\n  \"CUSTOM_SORACOM_GET_LATEST_HTTP_RESPONSE_TEXT\": {\n    \"en\": \" %1 Get latest HTTP response text\"\n  },\n  \"CUSTOM_SORACOM_GET_LATEST_HTTP_RESPONSE_JSON\": {\n    \"en\": \" %1 Get latest HTTP response JSON\"\n  },\n  \"CUSTOM_SORACOM_GET_LATEST_HTTP_RESPONSE_CONTENT\": {\n    \"en\": \" %1 Get latest HTTP response content\"\n  },\n  \"CUSTOM_SORACOM_GET_LATEST_HTTP_RESPONSE_REASON\": {\n    \"en\": \" %1 Get latest HTTP response reason\"\n  }\n};\n\nconst initType = 'custom_soracom_init';\nBlockly.BlockRegExpList['custom_soracom'] = {\n  regexp: new RegExp(/^custom_soracom_/),\n  code: \"from Soracom import Soracom\",\n  initBlockType: initType,\n  categoryId: 'custom_soracom',\n}\nBlockly.utils.registerLanguages(CUSTOM_SORACOM_LANGUAGES)\n\nBlockly.Msg.CUSTOM_SORACOM_HUE = '#34cdd7'\nBlockly.Msg.CUSTOM_SORACOM = 'Soracom'\n\nBlockly.utils.getcustom_soracomOptions = function() {\n  let options = [];\n  let list = Blockly.utils.getCustomNameList(initType);\n  for (let i = 0; i < list.length; i++) {\n    let value = list[i];\n    options.push([String(value), String(value)]);\n  }\n  if (options.length === 0) return [\n    ['soracom_0', 'soracom_0']\n  ];\n  return options;\n}\n\n\nBlockly.Blocks[\"custom_soracom_init\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_SORACOM_INIT,\n      'args0': [\n        // { 'type': 'field_dropdown', 'name': 'NAME', 'options': Blockly.utils.getcustom_soracomOptions },\n        {\n          'type': 'field_input',\n          'name': 'NAME',\n          'text': 'soracom_0'\n        },\n        {\n          \"type\": \"field_dropdown\",\n          \"name\": \"auth_type\",\n          \"options\": [\n            [\"PAP\", \"'pap'\"],\n            [\"CHAP\", \"'chap'\"],\n            [\"none\", \"'none'\"]\n          ],\n        }, {\n          'type': 'input_value',\n          'name': 'username'\n        }, {\n          'type': 'input_value',\n          'name': 'password'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#34cdd7\",\n      \"tool\": []\n    };\n  }\n}\n\nBlockly.Python[\"custom_soracom_init\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var auth_type = block.getFieldValue('auth_type');\n  var username = Blockly.Python.valueToCode(block, 'username', Blockly.Python.ORDER_FUNCTION_CALL);\n  var password = Blockly.Python.valueToCode(block, 'password', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname} = Soracom(${auth_type}, ${username}, ${password})\\n`\n}\n\nBlockly.Blocks[\"custom_soracom_set_interface\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_SORACOM_SET_INTERFACE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_soracomOptions\n        },\n        {\n          \"type\": \"field_dropdown\",\n          \"name\": \"objs\",\n          \"options\": [\n            [\"globals\", \"globals()\"]\n          ],\n        }, {\n          'type': 'input_value',\n          'name': 'obj_name'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#34cdd7\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_soracom_set_interface\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var objs = block.getFieldValue('objs');\n  var obj_name = Blockly.Python.valueToCode(block, 'obj_name', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.set_interface(${objs}, ${obj_name})\\n`\n}\n\nBlockly.Blocks[\"custom_soracom_set_debug_mode\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_SORACOM_SET_DEBUG_MODE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_soracomOptions\n        },\n        {\n          \"type\": \"field_switch\",\n          \"name\": \"debug_mode\",\n          \"options\": [\n            ['True', 'True'],\n            ['False', 'False']\n          ],\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#34cdd7\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_soracom_set_debug_mode\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var debug_mode = block.getFieldValue('debug_mode');\n  return `${varname}.set_debug_mode(${debug_mode})\\n`\n}\n\nBlockly.Blocks[\"custom_soracom_execute_at_command\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_SORACOM_EXECUTE_AT_COMMAND,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_soracomOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'command'\n        }, {\n          'type': 'input_value',\n          'name': 'expect_response'\n        }, {\n          'type': 'input_value',\n          'name': 'timeout'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#34cdd7\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_soracom_execute_at_command\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var command = Blockly.Python.valueToCode(block, 'command', Blockly.Python.ORDER_FUNCTION_CALL);\n  var expect_response = Blockly.Python.valueToCode(block, 'expect_response', Blockly.Python.ORDER_FUNCTION_CALL);\n  var timeout = Blockly.Python.valueToCode(block, 'timeout', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.execute_at_command(${command}, ${expect_response}, ${timeout})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_soracom_dialup\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_SORACOM_DIALUP,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_soracomOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'phone_number'\n        }, {\n          'type': 'input_value',\n          'name': 'timeout'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#34cdd7\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_soracom_dialup\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var phone_number = Blockly.Python.valueToCode(block, 'phone_number', Blockly.Python.ORDER_FUNCTION_CALL);\n  var timeout = Blockly.Python.valueToCode(block, 'timeout', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.dialup(${phone_number}, ${timeout})\\n`\n}\n\nBlockly.Blocks[\"custom_soracom_connect_ppp\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_SORACOM_CONNECT_PPP,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_soracomOptions\n        },\n\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#34cdd7\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_soracom_connect_ppp\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return [`${varname}.connect_ppp()`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_soracom_ppp_isconnected\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_SORACOM_PPP_ISCONNECTED,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_soracomOptions\n        },\n\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#34cdd7\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_soracom_ppp_isconnected\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return [`${varname}.ppp_isconnected()`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_soracom_ppp_ifconfig\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_SORACOM_PPP_IFCONFIG,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_soracomOptions\n        },\n\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#34cdd7\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_soracom_ppp_ifconfig\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return [`${varname}.ppp_ifconfig()`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_soracom_disconnect_ppp\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_SORACOM_DISCONNECT_PPP,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_soracomOptions\n        },\n\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#34cdd7\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_soracom_disconnect_ppp\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return [`${varname}.disconnect_ppp()`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_soracom_send_data_by_http\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_SORACOM_SEND_DATA_BY_HTTP,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_soracomOptions\n        },\n        {\n          \"type\": \"field_dropdown\",\n          \"name\": \"dest\",\n          \"options\": [\n            [\"Unified Endpoint\", \"'unified_endpoint'\"],\n            [\"Harvest\", \"'harvest'\"],\n            [\"Funnel\", \"'funnel'\"],\n            [\"Funk\", \"'funk'\"]\n          ],\n        }, {\n          'type': 'input_value',\n          'name': 'headers'\n        }, {\n          'type': 'input_value',\n          'name': 'body'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#34cdd7\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_soracom_send_data_by_http\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var dest = block.getFieldValue('dest');\n  var headers = Blockly.Python.valueToCode(block, 'headers', Blockly.Python.ORDER_FUNCTION_CALL);\n  var body = Blockly.Python.valueToCode(block, 'body', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.send_data_by_http(${dest}, ${headers}, ${body})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_soracom_send_data_to_beam\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_SORACOM_SEND_DATA_TO_BEAM,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_soracomOptions\n        },\n        {\n          \"type\": \"field_dropdown\",\n          \"name\": \"endpoint_type\",\n          \"options\": [\n            [\"HTTP\", \"'endpoint_http'\"],\n            [\"Website\", \"'endpoint_website'\"]\n          ],\n        }, {\n          'type': 'input_value',\n          'name': 'method'\n        }, {\n          'type': 'input_value',\n          'name': 'path'\n        }, {\n          'type': 'input_value',\n          'name': 'headers'\n        }, {\n          'type': 'input_value',\n          'name': 'body'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#34cdd7\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_soracom_send_data_to_beam\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var endpoint_type = block.getFieldValue('endpoint_type');\n  var method = Blockly.Python.valueToCode(block, 'method', Blockly.Python.ORDER_FUNCTION_CALL);\n  var path = Blockly.Python.valueToCode(block, 'path', Blockly.Python.ORDER_FUNCTION_CALL);\n  var headers = Blockly.Python.valueToCode(block, 'headers', Blockly.Python.ORDER_FUNCTION_CALL);\n  var body = Blockly.Python.valueToCode(block, 'body', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.send_data_to_beam(${endpoint_type}, ${method}, ${path}, ${headers}, ${body})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_soracom_get_sim_tag\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_SORACOM_GET_SIM_TAG,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_soracomOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'tag_name'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#34cdd7\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_soracom_get_sim_tag\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var tag_name = Blockly.Python.valueToCode(block, 'tag_name', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.get_sim_tag(${tag_name})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_soracom_set_sim_tag\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_SORACOM_SET_SIM_TAG,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_soracomOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'tag_name'\n        }, {\n          'type': 'input_value',\n          'name': 'tag_value'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#34cdd7\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_soracom_set_sim_tag\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var tag_name = Blockly.Python.valueToCode(block, 'tag_name', Blockly.Python.ORDER_FUNCTION_CALL);\n  var tag_value = Blockly.Python.valueToCode(block, 'tag_value', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.set_sim_tag(${tag_name}, ${tag_value})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_soracom_delete_sim_tag\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_SORACOM_DELETE_SIM_TAG,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_soracomOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'tag_name'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#34cdd7\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_soracom_delete_sim_tag\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var tag_name = Blockly.Python.valueToCode(block, 'tag_name', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.delete_sim_tag(${tag_name})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_soracom_get_userdata\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_SORACOM_GET_USERDATA,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_soracomOptions\n        },\n\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#34cdd7\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_soracom_get_userdata\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return [`${varname}.get_userdata()`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_soracom_get_latest_http_response_headers\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_SORACOM_GET_LATEST_HTTP_RESPONSE_HEADERS,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_soracomOptions\n        },\n\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#34cdd7\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_soracom_get_latest_http_response_headers\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return [`${varname}.get_latest_http_response_headers()`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_soracom_get_latest_http_response_status_code\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_SORACOM_GET_LATEST_HTTP_RESPONSE_STATUS_CODE,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_soracomOptions\n        },\n\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#34cdd7\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_soracom_get_latest_http_response_status_code\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return [`${varname}.get_latest_http_response_status_code()`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_soracom_get_latest_http_response_text\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_SORACOM_GET_LATEST_HTTP_RESPONSE_TEXT,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_soracomOptions\n        },\n\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#34cdd7\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_soracom_get_latest_http_response_text\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return [`${varname}.get_latest_http_response_text()`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_soracom_get_latest_http_response_json\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_SORACOM_GET_LATEST_HTTP_RESPONSE_JSON,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_soracomOptions\n        },\n\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#34cdd7\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_soracom_get_latest_http_response_json\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return [`${varname}.get_latest_http_response_json()`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_soracom_get_latest_http_response_content\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_SORACOM_GET_LATEST_HTTP_RESPONSE_CONTENT,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_soracomOptions\n        },\n\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#34cdd7\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_soracom_get_latest_http_response_content\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return [`${varname}.get_latest_http_response_content()`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_soracom_get_latest_http_response_reason\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_SORACOM_GET_LATEST_HTTP_RESPONSE_REASON,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_soracomOptions\n        },\n\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#34cdd7\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_soracom_get_latest_http_response_reason\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return [`${varname}.get_latest_http_response_reason()`, Blockly.Python.ORDER_NONE]\n}","toolbox":"\n<category name=\"Soracom\" colour=\"#34cdd7\" hidden=\"true\" toolboxitemid=\"custom_soracom\">\n<title text=\"Soracom\" docsLink=\"https://github.com/sayacom\"></title>\n<block type=\"custom_soracom_init\">\n  <value name=\"username\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\">sora</field>\n    </shadow>\n  </value>\n  <value name=\"password\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\">sora</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_soracom_set_interface\">\n  <value name=\"obj_name\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\">catmgnss_0</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_soracom_set_debug_mode\">\n  <field name=\"debug_mode\">False</field>\n</block><block type=\"custom_soracom_execute_at_command\">\n  <value name=\"command\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"expect_response\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"timeout\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">1000</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_soracom_dialup\">\n  <value name=\"phone_number\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\">*99#</field>\n    </shadow>\n  </value>\n  <value name=\"timeout\">\n    <shadow type=\"math_number\">\n      <field name=\"NUM\">2000</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_soracom_connect_ppp\"/><block type=\"custom_soracom_ppp_isconnected\"/><block type=\"custom_soracom_ppp_ifconfig\"/><block type=\"custom_soracom_disconnect_ppp\"/><block type=\"custom_soracom_send_data_by_http\">\n  <value name=\"headers\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"body\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_soracom_send_data_to_beam\">\n  <value name=\"method\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"path\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"headers\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n  <value name=\"body\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block><block type=\"custom_soracom_get_sim_tag\">\n  <value name=\"tag_name\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\">TAG_NAME</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_soracom_set_sim_tag\">\n  <value name=\"tag_name\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\">TAG_NAME</field>\n    </shadow>\n  </value>\n  <value name=\"tag_value\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\">TAG_VALUE</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_soracom_delete_sim_tag\">\n  <value name=\"tag_name\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\">TAG_NAME</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_soracom_get_userdata\"/><block type=\"custom_soracom_get_latest_http_response_headers\"/><block type=\"custom_soracom_get_latest_http_response_status_code\"/><block type=\"custom_soracom_get_latest_http_response_text\"/><block type=\"custom_soracom_get_latest_http_response_json\"/><block type=\"custom_soracom_get_latest_http_response_content\"/><block type=\"custom_soracom_get_latest_http_response_reason\"/>\n</category>\n","toolboxitemid":"custom_soracom","block_type":["custom_soracom___init__","custom_soracom_set_interface","custom_soracom_set_debug_mode","custom_soracom_execute_at_command","custom_soracom_dialup","custom_soracom_connect_ppp","custom_soracom_ppp_isconnected","custom_soracom_ppp_ifconfig","custom_soracom_disconnect_ppp","custom_soracom_send_data_by_http","custom_soracom_send_data_to_beam","custom_soracom_get_sim_tag","custom_soracom_set_sim_tag","custom_soracom_delete_sim_tag","custom_soracom_get_userdata","custom_soracom_get_latest_http_response_headers","custom_soracom_get_latest_http_response_status_code","custom_soracom_get_latest_http_response_text","custom_soracom_get_latest_http_response_json","custom_soracom_get_latest_http_response_content","custom_soracom_get_latest_http_response_reason"]},"data":{"name":"Soracom","note":{"en":"Soracom"},"details":{"color":"#34cdd7","link":"https://github.com/sayacom","image":"","category":"Custom"},"header":{"file":"Soracom","time":"2024-12-16","author":"sayacom","email":"","license":"MIT License"},"assignments":[],"example":"","source_internal":"","source_external":"from hardware import *\nimport machine\nimport time\nimport network\nimport requests\nfrom driver.simcom.common import AT_CMD\nfrom driver.simcom.common import Modem","members":[{"name":"__init__","note":{},"label":{"en":"Initialize %1 AuthType %2 Username %3 Password %4"},"params":[{"name":"auth_type","type":null,"default":null,"note":{},"field":"dropdown","options":{"PAP":"'pap'","CHAP":"'chap'","none":"'none'"}},{"name":"username","type":"str","default":"sora","note":{},"field":""},{"name":"password","type":"str","default":"sora","note":{},"field":""}],"return":"","source":"        self.ppp_username = username\n        self.ppp_password = password\n\n        self.ppp_authmode = 0\n        if auth_type == \"pap\":\n            self.ppp_authmode = 1\n        elif auth_type == \"chap\":\n            self.ppp_authmode = 2\n\n        self.__modem = None\n        self.__uart = None\n        self.__ppp = None\n        self.latest_response = None","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"set_interface","note":{},"label":{"en":"%1 Set UART/Modem Interface from %2 name %3"},"params":[{"name":"objs","type":null,"default":null,"note":{},"field":"dropdown","options":{"globals":"globals()"}},{"name":"obj_name","type":"str","default":"catmgnss_0","note":{},"field":""}],"return":"","source":"        interface_definition = objs.get(obj_name, None)\n        if interface_definition is None:\n            print(\"Could not find interface.\")\n            return\n\n        if isinstance(interface_definition, machine.UART):\n            self.__uart = interface_definition\n            self.__modem = Modem(self.__uart)\n            print(\"Use UART\")\n        elif isinstance(interface_definition, Modem):\n            self.__modem = interface_definition\n            self.__uart = interface_definition.uart\n            print(\"Use Modem\")","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"set_debug_mode","note":{},"label":{"en":"%1 Set debug mode %2"},"params":[{"name":"debug_mode","type":"bool","default":"False","note":{},"field":"switch"}],"return":"","source":"        if self.__modem:\n            self.__modem.modem_debug = debug_mode","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"execute_at_command","note":{},"label":{"en":"%1 Execute AT Command %2 Expect response %3 Timeout %4"},"params":[{"name":"command","type":"str","default":"","note":{},"field":""},{"name":"expect_response","type":"str","default":"","note":{},"field":""},{"name":"timeout","type":"int","default":"1000","note":{},"field":"number","max":"100","min":"0"}],"return":"","source":"        if self.__modem is None:\n            return None\n\n        output, error = self.__modem.execute_at_command(\n            AT_CMD(f\"{command}\", expect_response, timeout)\n        )\n\n        if not error:\n            return output\n\n        return None","ast_return":{"code":"None","id":null},"doc_return":null},{"name":"dialup","note":{},"label":{"en":"%1 Dialup to %2 Timeout %3"},"params":[{"name":"phone_number","type":"str","default":"*99#","note":{},"field":""},{"name":"timeout","type":"int","default":"2000","note":{},"field":"number","max":"100","min":"0"}],"return":"","source":"        self.__modem.execute_at_command(AT_CMD(f\"ATD{phone_number}\", \"CONNECT\", timeout))","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"connect_ppp","note":{},"label":{"en":"%1 Connect PPP"},"params":[],"return":"","source":"        if self.__modem is None:\n            return False\n\n        self.__ppp = network.PPP(self.__uart)\n        self.__ppp.active(True)\n\n        for _ in range(5):\n            self.__ppp.connect(authmode=self.ppp_authmode, username=self.ppp_username, password=self.ppp_password)\n            time.sleep_ms(1000)\n            if self.__ppp.isconnected():\n                break\n\n        return self.__ppp.isconnected()","ast_return":{"code":"self.__ppp.isconnected()","id":null},"doc_return":null},{"name":"ppp_isconnected","note":{},"label":{"en":"%1 PPP isConnected"},"params":[],"return":"","source":"        if self.__modem is None or self.__ppp is None:\n            return False\n\n        return self.__ppp.isconnected()","ast_return":{"code":"self.__ppp.isconnected()","id":null},"doc_return":null},{"name":"ppp_ifconfig","note":{},"label":{"en":"%1 PPP ifconfig"},"params":[],"return":"","source":"        if self.__modem is None or self.__ppp is None:\n            return None\n\n        return self.__ppp.ifconfig()","ast_return":{"code":"self.__ppp.ifconfig()","id":null},"doc_return":null},{"name":"disconnect_ppp","note":{},"label":{"en":"%1 Disconnect PPP"},"params":[],"return":"","source":"        if self.__modem is None or self.__ppp is None:\n            return False\n\n        return self.__ppp.active(False)","ast_return":{"code":"self.__ppp.active(False)","id":null},"doc_return":null},{"name":"send_data_by_http","note":{},"label":{"en":"%1 Send data as JSON by HTTP %2 Header %3 Body %4"},"params":[{"name":"dest","type":null,"default":null,"note":{},"field":"dropdown","options":{"Unified Endpoint":"'unified_endpoint'","Harvest":"'harvest'","Funnel":"'funnel'","Funk":"'funk'"}},{"name":"headers","type":null,"default":null,"note":{},"field":""},{"name":"body","type":null,"default":null,"note":{},"field":""}],"return":"","source":"        host = None\n        if dest == \"unified_endpoint\":\n            host = \"http://uni.soracom.io\"\n        elif dest == \"harvest\":\n            host = \"http://harvest.soracom.io\"\n        elif dest == \"funnel\":\n            host = \"http://funnel.soracom.io\"\n        elif dest == \"funk\":\n            host = \"http://funk.soracom.io\"\n\n        if headers == \"\":\n            headers = None\n        if body == \"\":\n            body = None\n\n        self.latest_response = requests.post(url=host, headers=headers, json=body)\n        return self.latest_response","ast_return":{"code":"self.latest_response","id":null},"doc_return":null},{"name":"send_data_to_beam","note":{},"label":{"en":"%1 Send data as JSON by HTTP to SORACOM Beam, Endpoint %2 Method %3 Path %4 Headers %5 Body %6"},"params":[{"name":"endpoint_type","type":null,"default":null,"note":{},"field":"dropdown","options":{"HTTP":"'endpoint_http'","Website":"'endpoint_website'"}},{"name":"method","type":null,"default":null,"note":{},"field":""},{"name":"path","type":null,"default":null,"note":{},"field":""},{"name":"headers","type":null,"default":null,"note":{},"field":""},{"name":"body","type":null,"default":null,"note":{},"field":""}],"return":"","source":"        if not path:\n            path = '/'\n        if not headers:\n            headers = None\n        if not body:\n            body = None\n        \n        url = None\n        if endpoint_type == \"endpoint_http\":\n            url = f\"http://beam.soracom.io:8888{path.lstrip('/')}\"\n        elif endpoint_type == \"endpoint_website\":\n            url = f\"http://beam.soracom.io:18080{path.lstrip('/')}\"\n\n        self.latest_response = requests.request(method=method, url=url, headers=headers, json=body)\n        return self.latest_response","ast_return":{"code":"self.latest_response","id":null},"doc_return":null},{"name":"get_sim_tag","note":{},"label":{"en":"%1 Get SIM Tag Name %2"},"params":[{"name":"tag_name","type":"str","default":"TAG_NAME","note":{},"field":""}],"return":"","source":"        self.latest_response = requests.get(url=f\"http://metadata.soracom.io/v1/subscriber.tags.{tag_name}\")\n        return self.latest_response","ast_return":{"code":"self.latest_response","id":null},"doc_return":null},{"name":"set_sim_tag","note":{},"label":{"en":"%1 Set SIM Tag Name %2 Value %3"},"params":[{"name":"tag_name","type":"str","default":"TAG_NAME","note":{},"field":""},{"name":"tag_value","type":"str","default":"TAG_VALUE","note":{},"field":""}],"return":"","source":"        tag_object = [{\"tagName\": tag_name, \"tagValue\": tag_value}]\n        self.latest_response = requests.put(url=f\"http://metadata.soracom.io/v1/subscriber/tags\", json=tag_object)\n        return self.latest_response","ast_return":{"code":"self.latest_response","id":null},"doc_return":null},{"name":"delete_sim_tag","note":{},"label":{"en":"%1 Delete SIM Tag Name %2"},"params":[{"name":"tag_name","type":"str","default":"TAG_NAME","note":{},"field":""}],"return":"","source":"        self.latest_response = requests.delete(url=f\"http://metadata.soracom.io/v1/subscriber/tags/{tag_name}\")\n        return self.latest_response","ast_return":{"code":"self.latest_response","id":null},"doc_return":null},{"name":"get_userdata","note":{},"label":{"en":"%1 Get Userdata"},"params":[],"return":"","source":"        self.latest_response = requests.get(url=f\"http://metadata.soracom.io/v1/userdata\")\n        return self.latest_response","ast_return":{"code":"self.latest_response","id":null},"doc_return":null},{"name":"get_latest_http_response_headers","note":{},"label":{"en":" %1 Get latest HTTP response headers"},"params":[],"return":"","source":"        if self.latest_response is None:\n            return None\n\n        return self.latest_response.headers","ast_return":{"code":"self.latest_response.headers","id":null},"doc_return":null},{"name":"get_latest_http_response_status_code","note":{},"label":{"en":"%1 Get latest HTTP response status code"},"params":[],"return":"","source":"        if self.latest_response is None:\n            return None\n\n        return self.latest_response.status_code","ast_return":{"code":"self.latest_response.status_code","id":null},"doc_return":null},{"name":"get_latest_http_response_text","note":{},"label":{"en":" %1 Get latest HTTP response text"},"params":[],"return":"","source":"        if self.latest_response is None:\n            return None\n\n        return self.latest_response.text","ast_return":{"code":"self.latest_response.text","id":null},"doc_return":null},{"name":"get_latest_http_response_json","note":{},"label":{"en":" %1 Get latest HTTP response JSON"},"params":[],"return":"","source":"        if self.latest_response is None:\n            return None\n\n        return self.latest_response.json()","ast_return":{"code":"self.latest_response.json()","id":null},"doc_return":null},{"name":"get_latest_http_response_content","note":{},"label":{"en":" %1 Get latest HTTP response content"},"params":[],"return":"","source":"        if self.latest_response is None:\n            return None\n\n        return self.latest_response.content","ast_return":{"code":"self.latest_response.content","id":null},"doc_return":null},{"name":"get_latest_http_response_reason","note":{},"label":{"en":" %1 Get latest HTTP response reason"},"params":[],"return":"","source":"        if self.latest_response is None:\n            return None\n\n        return self.latest_response.reason","ast_return":{"code":"self.latest_response.reason","id":null},"doc_return":null}],"python_file_name":"soracom"},"pyCode":"\n\"\"\"\nfile     Soracom\ntime     2024-12-17\nauthor   sayacom\nemail   \nlicense  MIT License\n\"\"\"\n\nfrom hardware import *\nimport machine\nimport time\nimport network\nimport requests\nfrom driver.simcom.common import AT_CMD\nfrom driver.simcom.common import Modem\n\nclass Soracom:\n    \"\"\"\n    note:\n        en: Soracom\n    details:\n        color: '#34cdd7'\n        link: https://github.com/sayacom\n        image: ''\n        category: Custom\n    example: ''\n    \"\"\"\n\n\n\n\n    def __init__(self, auth_type, username: str = 'sora', password: str = 'sora'):\n        \"\"\"\n        label:\n            en: Initialize %1 AuthType %2 Username %3 Password %4\n        params:\n            auth_type:\n                name: auth_type\n                field: dropdown\n                options:\n                    PAP: '''pap'''\n                    CHAP: '''chap'''\n                    none: '''none'''\n            username:\n                name: username\n                type: str\n                default: sora\n            password:\n                name: password\n                type: str\n                default: sora\n        \"\"\"\n        self.ppp_username = username\n        self.ppp_password = password\n\n        self.ppp_authmode = 0\n        if auth_type == \"pap\":\n            self.ppp_authmode = 1\n        elif auth_type == \"chap\":\n            self.ppp_authmode = 2\n\n        self.__modem = None\n        self.__uart = None\n        self.__ppp = None\n        self.latest_response = None\n\n    def set_interface(self, objs, obj_name: str = 'catmgnss_0'):\n        \"\"\"\n        label:\n            en: '%1 Set UART/Modem Interface from %2 name %3'\n        params:\n            objs:\n                name: objs\n                field: dropdown\n                options:\n                    globals: globals()\n            obj_name:\n                name: obj_name\n                type: str\n                default: catmgnss_0\n        \"\"\"\n        interface_definition = objs.get(obj_name, None)\n        if interface_definition is None:\n            print(\"Could not find interface.\")\n            return\n\n        if isinstance(interface_definition, machine.UART):\n            self.__uart = interface_definition\n            self.__modem = Modem(self.__uart)\n            print(\"Use UART\")\n        elif isinstance(interface_definition, Modem):\n            self.__modem = interface_definition\n            self.__uart = interface_definition.uart\n            print(\"Use Modem\")\n\n    def set_debug_mode(self, debug_mode: bool = False):\n        \"\"\"\n        label:\n            en: '%1 Set debug mode %2'\n        params:\n            debug_mode:\n                name: debug_mode\n                type: bool\n                default: 'False'\n                field: switch\n        \"\"\"\n        if self.__modem:\n            self.__modem.modem_debug = debug_mode\n\n    def execute_at_command(self, command: str, expect_response: str, timeout: int = 1000):\n        \"\"\"\n        label:\n            en: '%1 Execute AT Command %2 Expect response %3 Timeout %4'\n        params:\n            command:\n                name: command\n                type: str\n            expect_response:\n                name: expect_response\n                type: str\n            timeout:\n                name: timeout\n                type: int\n                default: '1000'\n                field: number\n                max: '100'\n                min: '0'\n        \"\"\"\n        if self.__modem is None:\n            return None\n\n        output, error = self.__modem.execute_at_command(\n            AT_CMD(f\"{command}\", expect_response, timeout)\n        )\n\n        if not error:\n            return output\n\n        return None\n\n    def dialup(self, phone_number: str = '*99#', timeout: int = 2000):\n        \"\"\"\n        label:\n            en: '%1 Dialup to %2 Timeout %3'\n        params:\n            phone_number:\n                name: phone_number\n                type: str\n                default: '*99#'\n            timeout:\n                name: timeout\n                type: int\n                default: '2000'\n                field: number\n                max: '100'\n                min: '0'\n        \"\"\"\n        self.__modem.execute_at_command(AT_CMD(f\"ATD{phone_number}\", \"CONNECT\", timeout))\n\n    def connect_ppp(self):\n        \"\"\"\n        label:\n            en: '%1 Connect PPP'\n        \"\"\"\n        if self.__modem is None:\n            return False\n\n        self.__ppp = network.PPP(self.__uart)\n        self.__ppp.active(True)\n\n        for _ in range(5):\n            self.__ppp.connect(authmode=self.ppp_authmode, username=self.ppp_username, password=self.ppp_password)\n            time.sleep_ms(1000)\n            if self.__ppp.isconnected():\n                break\n\n        return self.__ppp.isconnected()\n\n    def ppp_isconnected(self):\n        \"\"\"\n        label:\n            en: '%1 PPP isConnected'\n        \"\"\"\n        if self.__modem is None or self.__ppp is None:\n            return False\n\n        return self.__ppp.isconnected()\n\n    def ppp_ifconfig(self):\n        \"\"\"\n        label:\n            en: '%1 PPP ifconfig'\n        \"\"\"\n        if self.__modem is None or self.__ppp is None:\n            return None\n\n        return self.__ppp.ifconfig()\n\n    def disconnect_ppp(self):\n        \"\"\"\n        label:\n            en: '%1 Disconnect PPP'\n        \"\"\"\n        if self.__modem is None or self.__ppp is None:\n            return False\n\n        return self.__ppp.active(False)\n\n    def send_data_by_http(self, dest, headers, body):\n        \"\"\"\n        label:\n            en: '%1 Send data as JSON by HTTP %2 Header %3 Body %4'\n        params:\n            dest:\n                name: dest\n                field: dropdown\n                options:\n                    Unified Endpoint: '''unified_endpoint'''\n                    Harvest: '''harvest'''\n                    Funnel: '''funnel'''\n                    Funk: '''funk'''\n            headers:\n                name: headers\n            body:\n                name: body\n        \"\"\"\n        host = None\n        if dest == \"unified_endpoint\":\n            host = \"http://uni.soracom.io\"\n        elif dest == \"harvest\":\n            host = \"http://harvest.soracom.io\"\n        elif dest == \"funnel\":\n            host = \"http://funnel.soracom.io\"\n        elif dest == \"funk\":\n            host = \"http://funk.soracom.io\"\n\n        if headers == \"\":\n            headers = None\n        if body == \"\":\n            body = None\n\n        self.latest_response = requests.post(url=host, headers=headers, json=body)\n        return self.latest_response\n\n    def send_data_to_beam(self, endpoint_type, method, path, headers, body):\n        \"\"\"\n        label:\n            en: '%1 Send data as JSON by HTTP to SORACOM Beam, Endpoint %2 Method %3 Path\n                %4 Headers %5 Body %6'\n        params:\n            endpoint_type:\n                name: endpoint_type\n                field: dropdown\n                options:\n                    HTTP: '''endpoint_http'''\n                    Website: '''endpoint_website'''\n            method:\n                name: method\n            path:\n                name: path\n            headers:\n                name: headers\n            body:\n                name: body\n        \"\"\"\n        if not path:\n            path = '/'\n        if not headers:\n            headers = None\n        if not body:\n            body = None\n        \n        url = None\n        if endpoint_type == \"endpoint_http\":\n            url = f\"http://beam.soracom.io:8888{path.lstrip('/')}\"\n        elif endpoint_type == \"endpoint_website\":\n            url = f\"http://beam.soracom.io:18080{path.lstrip('/')}\"\n\n        self.latest_response = requests.request(method=method, url=url, headers=headers, json=body)\n        return self.latest_response\n\n    def get_sim_tag(self, tag_name: str = 'TAG_NAME'):\n        \"\"\"\n        label:\n            en: '%1 Get SIM Tag Name %2'\n        params:\n            tag_name:\n                name: tag_name\n                type: str\n                default: TAG_NAME\n        \"\"\"\n        self.latest_response = requests.get(url=f\"http://metadata.soracom.io/v1/subscriber.tags.{tag_name}\")\n        return self.latest_response\n\n    def set_sim_tag(self, tag_name: str = 'TAG_NAME', tag_value: str = 'TAG_VALUE'):\n        \"\"\"\n        label:\n            en: '%1 Set SIM Tag Name %2 Value %3'\n        params:\n            tag_name:\n                name: tag_name\n                type: str\n                default: TAG_NAME\n            tag_value:\n                name: tag_value\n                type: str\n                default: TAG_VALUE\n        \"\"\"\n        tag_object = [{\"tagName\": tag_name, \"tagValue\": tag_value}]\n        self.latest_response = requests.put(url=f\"http://metadata.soracom.io/v1/subscriber/tags\", json=tag_object)\n        return self.latest_response\n\n    def delete_sim_tag(self, tag_name: str = 'TAG_NAME'):\n        \"\"\"\n        label:\n            en: '%1 Delete SIM Tag Name %2'\n        params:\n            tag_name:\n                name: tag_name\n                type: str\n                default: TAG_NAME\n        \"\"\"\n        self.latest_response = requests.delete(url=f\"http://metadata.soracom.io/v1/subscriber/tags/{tag_name}\")\n        return self.latest_response\n\n    def get_userdata(self):\n        \"\"\"\n        label:\n            en: '%1 Get Userdata'\n        \"\"\"\n        self.latest_response = requests.get(url=f\"http://metadata.soracom.io/v1/userdata\")\n        return self.latest_response\n\n    def get_latest_http_response_headers(self):\n        \"\"\"\n        label:\n            en: ' %1 Get latest HTTP response headers'\n        \"\"\"\n        if self.latest_response is None:\n            return None\n\n        return self.latest_response.headers\n\n    def get_latest_http_response_status_code(self):\n        \"\"\"\n        label:\n            en: '%1 Get latest HTTP response status code'\n        \"\"\"\n        if self.latest_response is None:\n            return None\n\n        return self.latest_response.status_code\n\n    def get_latest_http_response_text(self):\n        \"\"\"\n        label:\n            en: ' %1 Get latest HTTP response text'\n        \"\"\"\n        if self.latest_response is None:\n            return None\n\n        return self.latest_response.text\n\n    def get_latest_http_response_json(self):\n        \"\"\"\n        label:\n            en: ' %1 Get latest HTTP response JSON'\n        \"\"\"\n        if self.latest_response is None:\n            return None\n\n        return self.latest_response.json()\n\n    def get_latest_http_response_content(self):\n        \"\"\"\n        label:\n            en: ' %1 Get latest HTTP response content'\n        \"\"\"\n        if self.latest_response is None:\n            return None\n\n        return self.latest_response.content\n\n    def get_latest_http_response_reason(self):\n        \"\"\"\n        label:\n            en: ' %1 Get latest HTTP response reason'\n        \"\"\"\n        if self.latest_response is None:\n            return None\n\n        return self.latest_response.reason\n\n\n","version":"alpha2"}